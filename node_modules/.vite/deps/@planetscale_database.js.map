{
  "version": 3,
  "sources": ["../../.pnpm/@planetscale+database@1.11.0/node_modules/@planetscale/database/dist/sanitization.js", "../../.pnpm/@planetscale+database@1.11.0/node_modules/@planetscale/database/dist/text.js", "../../.pnpm/@planetscale+database@1.11.0/node_modules/@planetscale/database/dist/version.js", "../../.pnpm/@planetscale+database@1.11.0/node_modules/@planetscale/database/dist/index.js"],
  "sourcesContent": ["export function format(query, values) {\n    return Array.isArray(values) ? replacePosition(query, values) : replaceNamed(query, values);\n}\nfunction replacePosition(query, values) {\n    let index = 0;\n    return query.replace(/\\?/g, (match) => {\n        return index < values.length ? sanitize(values[index++]) : match;\n    });\n}\nfunction replaceNamed(query, values) {\n    return query.replace(/:(\\w+)/g, (match, name) => {\n        return hasOwn(values, name) ? sanitize(values[name]) : match;\n    });\n}\nfunction hasOwn(obj, name) {\n    return Object.prototype.hasOwnProperty.call(obj, name);\n}\nfunction sanitize(value) {\n    if (value == null) {\n        return 'null';\n    }\n    if (typeof value === 'number') {\n        return String(value);\n    }\n    if (typeof value === 'boolean') {\n        return value ? 'true' : 'false';\n    }\n    if (typeof value === 'string') {\n        return quote(value);\n    }\n    if (Array.isArray(value)) {\n        return value.map(sanitize).join(', ');\n    }\n    if (value instanceof Date) {\n        return quote(value.toISOString().replace('Z', ''));\n    }\n    return quote(value.toString());\n}\nfunction quote(text) {\n    return `'${escape(text)}'`;\n}\nconst re = /[\\0\\b\\n\\r\\t\\x1a\\\\\"']/g;\nfunction escape(text) {\n    return text.replace(re, replacement);\n}\nfunction replacement(text) {\n    switch (text) {\n        case '\"':\n            return '\\\\\"';\n        case \"'\":\n            return \"\\\\'\";\n        case '\\n':\n            return '\\\\n';\n        case '\\r':\n            return '\\\\r';\n        case '\\t':\n            return '\\\\t';\n        case '\\\\':\n            return '\\\\\\\\';\n        case '\\0':\n            return '\\\\0';\n        case '\\b':\n            return '\\\\b';\n        case '\\x1a':\n            return '\\\\Z';\n        default:\n            return '';\n    }\n}\n", "const decoder = new TextDecoder('utf-8');\nexport function decode(text) {\n    return text ? decoder.decode(Uint8Array.from(bytes(text))) : '';\n}\nexport function hex(text) {\n    const digits = bytes(text).map((b) => b.toString(16).padStart(2, '0'));\n    return `0x${digits.join('')}`;\n}\nfunction bytes(text) {\n    return text.split('').map((c) => c.charCodeAt(0));\n}\n", "export const Version = '1.11.0';\n", "import { format } from './sanitization.js';\nexport { format } from './sanitization.js';\nexport { hex } from './text.js';\nimport { decode } from './text.js';\nimport { Version } from './version.js';\nexport class DatabaseError extends Error {\n    constructor(message, status, body) {\n        super(message);\n        this.status = status;\n        this.name = 'DatabaseError';\n        this.body = body;\n    }\n}\nconst defaultExecuteOptions = {\n    as: 'object'\n};\nexport class Client {\n    constructor(config) {\n        this.config = config;\n    }\n    async transaction(fn) {\n        return this.connection().transaction(fn);\n    }\n    async execute(query, args = null, options = defaultExecuteOptions) {\n        return this.connection().execute(query, args, options);\n    }\n    connection() {\n        return new Connection(this.config);\n    }\n}\nclass Tx {\n    constructor(conn) {\n        this.conn = conn;\n    }\n    async execute(query, args = null, options = defaultExecuteOptions) {\n        return this.conn.execute(query, args, options);\n    }\n}\nfunction protocol(protocol) {\n    return protocol === 'http:' ? protocol : 'https:';\n}\nfunction buildURL(url) {\n    const scheme = `${protocol(url.protocol)}//`;\n    return new URL(url.pathname, `${scheme}${url.host}`).toString();\n}\nexport class Connection {\n    constructor(config) {\n        var _a;\n        this.session = null;\n        this.config = { ...config };\n        if (typeof fetch !== 'undefined') {\n            (_a = this.config).fetch || (_a.fetch = fetch);\n        }\n        if (config.url) {\n            const url = new URL(config.url);\n            this.config.username = url.username;\n            this.config.password = url.password;\n            this.config.host = url.hostname;\n            this.url = buildURL(url);\n        }\n        else {\n            this.url = new URL(`https://${this.config.host}`).toString();\n        }\n    }\n    async transaction(fn) {\n        const conn = new Connection(this.config);\n        const tx = new Tx(conn);\n        try {\n            await tx.execute('BEGIN');\n            const res = await fn(tx);\n            await tx.execute('COMMIT');\n            return res;\n        }\n        catch (err) {\n            await tx.execute('ROLLBACK');\n            throw err;\n        }\n    }\n    async refresh() {\n        await this.createSession();\n    }\n    async execute(query, args = null, options = defaultExecuteOptions) {\n        const url = new URL('/psdb.v1alpha1.Database/Execute', this.url);\n        const formatter = this.config.format || format;\n        const sql = args ? formatter(query, args) : query;\n        const saved = await postJSON(this.config, url, { query: sql, session: this.session });\n        const { result, session, error, timing } = saved;\n        if (session) {\n            this.session = session;\n        }\n        if (error) {\n            throw new DatabaseError(error.message, 400, error);\n        }\n        const rowsAffected = result?.rowsAffected ? parseInt(result.rowsAffected, 10) : 0;\n        const insertId = result?.insertId ?? '0';\n        const fields = result?.fields ?? [];\n        for (const field of fields) {\n            field.type || (field.type = 'NULL');\n        }\n        const castFn = options.cast || this.config.cast || cast;\n        const rows = result ? parse(result, castFn, options.as || 'object') : [];\n        const headers = fields.map((f) => f.name);\n        const typeByName = (acc, { name, type }) => ({ ...acc, [name]: type });\n        const types = fields.reduce(typeByName, {});\n        const timingSeconds = timing ?? 0;\n        return {\n            headers,\n            types,\n            fields,\n            rows,\n            rowsAffected,\n            insertId,\n            size: rows.length,\n            statement: sql,\n            time: timingSeconds * 1000\n        };\n    }\n    async createSession() {\n        const url = new URL('/psdb.v1alpha1.Database/CreateSession', this.url);\n        const { session } = await postJSON(this.config, url);\n        this.session = session;\n        return session;\n    }\n}\nasync function postJSON(config, url, body = {}) {\n    const auth = btoa(`${config.username}:${config.password}`);\n    const { fetch } = config;\n    const response = await fetch(url.toString(), {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: {\n            'Content-Type': 'application/json',\n            'User-Agent': `database-js/${Version}`,\n            Authorization: `Basic ${auth}`\n        },\n        cache: 'no-store'\n    });\n    if (response.ok) {\n        return await response.json();\n    }\n    else {\n        let error = null;\n        try {\n            const e = (await response.json()).error;\n            error = new DatabaseError(e.message, response.status, e);\n        }\n        catch {\n            error = new DatabaseError(response.statusText, response.status, {\n                code: 'internal',\n                message: response.statusText\n            });\n        }\n        throw error;\n    }\n}\nexport function connect(config) {\n    return new Connection(config);\n}\nfunction parseArrayRow(fields, rawRow, cast) {\n    const row = decodeRow(rawRow);\n    return fields.map((field, ix) => {\n        return cast(field, row[ix]);\n    });\n}\nfunction parseObjectRow(fields, rawRow, cast) {\n    const row = decodeRow(rawRow);\n    return fields.reduce((acc, field, ix) => {\n        acc[field.name] = cast(field, row[ix]);\n        return acc;\n    }, {});\n}\nfunction parse(result, cast, returnAs) {\n    const fields = result.fields;\n    const rows = result.rows ?? [];\n    return rows.map((row) => returnAs === 'array' ? parseArrayRow(fields, row, cast) : parseObjectRow(fields, row, cast));\n}\nfunction decodeRow(row) {\n    const values = row.values ? atob(row.values) : '';\n    let offset = 0;\n    return row.lengths.map((size) => {\n        const width = parseInt(size, 10);\n        if (width < 0)\n            return null;\n        const splice = values.substring(offset, offset + width);\n        offset += width;\n        return splice;\n    });\n}\nexport function cast(field, value) {\n    if (value === '' || value == null) {\n        return value;\n    }\n    switch (field.type) {\n        case 'INT8':\n        case 'INT16':\n        case 'INT24':\n        case 'INT32':\n        case 'UINT8':\n        case 'UINT16':\n        case 'UINT24':\n        case 'UINT32':\n        case 'YEAR':\n            return parseInt(value, 10);\n        case 'FLOAT32':\n        case 'FLOAT64':\n            return parseFloat(value);\n        case 'DECIMAL':\n        case 'INT64':\n        case 'UINT64':\n        case 'DATE':\n        case 'TIME':\n        case 'DATETIME':\n        case 'TIMESTAMP':\n        case 'BLOB':\n        case 'BIT':\n        case 'VARBINARY':\n        case 'BINARY':\n        case 'GEOMETRY':\n            return value;\n        case 'JSON':\n            return JSON.parse(decode(value));\n        default:\n            return decode(value);\n    }\n}\n"],
  "mappings": "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",
  "names": ["protocol", "fetch", "cast"]
}

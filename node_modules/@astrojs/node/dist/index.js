function getAdapter(options) {
  return {
    name: "@astrojs/node",
    serverEntrypoint: "@astrojs/node/server.js",
    previewEntrypoint: "@astrojs/node/preview.js",
    exports: ["handler", "startServer"],
    args: options
  };
}
function createIntegration(userOptions) {
  if (!(userOptions == null ? void 0 : userOptions.mode)) {
    throw new Error(`[@astrojs/node] Setting the 'mode' option is required.`);
  }
  let _options;
  return {
    name: "@astrojs/node",
    hooks: {
      "astro:config:setup": ({ updateConfig }) => {
        updateConfig({
          vite: {
            ssr: {
              noExternal: ["@astrojs/node"]
            }
          }
        });
      },
      "astro:config:done": ({ setAdapter, config }) => {
        var _a, _b;
        _options = {
          ...userOptions,
          client: (_a = config.build.client) == null ? void 0 : _a.toString(),
          server: (_b = config.build.server) == null ? void 0 : _b.toString(),
          host: config.server.host,
          port: config.server.port
        };
        setAdapter(getAdapter(_options));
        if (config.output === "static") {
          console.warn(
            `[@astrojs/node] \`output: "server"\` or  \`output: "hybrid"\` is required to use this adapter.`
          );
        }
      }
    }
  };
}
export {
  createIntegration as default,
  getAdapter
};
